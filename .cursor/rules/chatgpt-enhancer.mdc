---
description: 
globs: 
alwaysApply: false
---
# ChatGPT Enhancer Chrome Extension Development Guidelines

This rule provides comprehensive guidelines for developing the ChatGPT Enhancer Chrome Extension, covering code organization, architecture, styling, performance, security, and accessibility requirements.

> ðŸ§  RIPER Principles:
> - Fix causes, not symptoms
> - Donâ€™t be helpful â€” be better
> - Write better code
> - Be very detailed in summarization and never omit whatâ€™s important

## Code Organization and Structure

### Directory Structure
chatgpt-enhancer/
â”œâ”€â”€ content/
â”‚   â”œâ”€â”€ ui/
â”‚   â”‚   â”œâ”€â”€ OverlayPanel.tsx
â”‚   â”‚   â”œâ”€â”€ FolderList.tsx
â”‚   â”‚   â”œâ”€â”€ FolderItem.tsx
â”‚   â”‚   â””â”€â”€ PromptManager.ts
â”‚   â”œâ”€â”€ contentScript.ts
â”‚   â””â”€â”€ contentStyle.css
â”œâ”€â”€ background/
â”‚   â””â”€â”€ background.ts
â””â”€â”€ manifest.json

### File Naming Conventions
- Use lowercase with descriptive names for utility scripts
- TypeScript files: PascalCase for components, camelCase for helpers
- CSS files: kebab-case
- Components must reside in `ui/components` when modular

### Component Architecture

1. **Overlay Panel**
   - Fixed `z-index: 10000`
   - Two-pane layout (sidebar + main content)
   - Toggle button with drag support
   - Integrates `FolderList` in the sidebar

2. **Prompt Manager**
   - Manages all folder and prompt state
   - Provides `getFolders()`, `setActiveFolderId()`, `getActiveFolderId()`
   - Initializes with a hardcoded list of folders (for MVP)
   - Future: sync with `chrome.storage.local`
   - Must remain stateless across reloads

3. **FolderList & FolderItem**
   - Stateless UI-only components
   - Rendered within `OverlayPanel`
   - Highlight selected folder
   - Call `PromptManager` methods on click

4. **Content Script**
   - Uses Shadow DOM for React root injection
   - Mounts overlay safely with lifecycle checks
   - Prevents double injection via ID guards

---

## Styling Guidelines

- Use inline styles or scoped CSS modules (no global classes)
- Maintain consistent layout using Flexbox
- Ensure overlay panel max width is 1000px and height is 80vh
- Follow 8px spacing grid for padding/margin
- Z-Index:
  - Modal: 10001
  - Overlay: 10000
  - Backdrop: 9999

---

## State Management

### chrome.storage.local
- For persistent folders and prompts (planned)
- Use JSON-safe structures
- Add migration versioning if schema evolves

### Runtime State
- Centralized in `PromptManager`
- Only `PromptManager` can update global state
- UI components must re-render on changes via local state sync

---

## Security Requirements

- Enforce strict CSP in `manifest.json`
- Never use inline JS or unsafe-eval
- Sanitize all user input (prompt content)
- Secure message passing between background and content scripts

---

## Accessibility & Keyboard Navigation

- All interactive elements must be keyboard navigable
- Implement proper focus trapping in modal
- Use ARIA labels for screen readers (Planned)
- Follow WCAG 2.1 AA where possible

---

## Error Handling

- Wrap React roots with error boundaries
- Log unexpected errors to console with context
- Provide fallbacks for missing folders or prompts
- Gracefully handle chrome.storage failures

---

## Testing

### Unit Testing (Planned)
- Component props and rendering
- State sync in `PromptManager`
- DOM injection lifecycle

### Integration Testing (Planned)
- Overlay interaction in ChatGPT page
- Folder selection
- Prompt creation workflows

---

## Version Control

- Use semantic commit messages (e.g., `fix:`, `feat:`, `refactor:`)
- Reference issues or RIPER modes (e.g., `Î©â‚„`)
- Maintain a clean `main` branch with feature branches off `develop`
- Document all feature merges in `CHANGELOG.md`

---

## Build & Deployment

- Use `build-and-package.ps1` to create production zip
- Ensure all assets and icons are included
- Verify manifest version is bumped on release
- Use feature flags or internal toggles for unfinished features

---

## Maintenance

- Keep SPEC.md and Development Guidelines in sync
- Update `progress.md` and `activeContext.md` regularly
- Archive deprecated components with reason
- Use MDC rules to protect critical files

shorthand:
  "!build": >
    Run .\build-and-package.ps1 to build both:
      - vite.content.config.ts
      - vite.config.ts
    The script handles both configs internally.

shorthand:
  "!finalize": >
    1. ðŸ›  Rebuild both Vite outputs:
       .\build-and-package.ps1 --config vite.content.config.ts
       .\build-and-package.ps1
    2. ðŸ“š Update docs/SPEC.md with:
       - PromptManager now includes subscribe/notify listener system
       - OverlayPanel and FolderList now reactive to updates
    3. ðŸ§  Update memory-bank files:
       - progress.md with [x] Implemented pub/sub via subscribe()
       - activeContext.md with next task (e.g. inline prompt editing)
    4. ðŸ—ƒ Git commit:
       git add .
       git commit -m "Finalize Î©â‚„: Pub/Sub integration and reactive folder list"
       git tag finalize-Î©â‚„-step3-$(Get-Date -Format 'yyyyMMdd-HHmm')
    5. ðŸ§­ Optionally:
       git push --tags







---